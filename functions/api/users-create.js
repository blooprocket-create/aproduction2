const bcrypt=require('bcryptjs');const {pool}=require('./util/db');const {json,badRequest,readJSON,unauthorized,forbidden}=require('./util/http');const {getAuth,requireRole}=require('./util/guard');exports.handler=async(e)=>{if(e.httpMethod!=='POST') return json(405,{error:'Method Not Allowed'});const a=getAuth(e);if(!a) return unauthorized();if(!requireRole(a,['admin'])) return forbidden();const {name,email,role='customer',password}=await readJSON(e);if(!name||!email) return badRequest('Name and email required.');const c=await pool.connect();try{const ex=await c.query('SELECT 1 FROM users WHERE lower(email)=lower($1)',[email]);if(ex.rowCount) return json(409,{error:'Email already exists'});const hash=password?await bcrypt.hash(password,10):null;const r=await c.query('INSERT INTO users (name, email, role, password_hash) VALUES ($1,$2,$3,$4) RETURNING id, name, email, role, created_at',[name,email,role,hash]);return json(200,{user:r.rows[0]})}finally{c.release()}};